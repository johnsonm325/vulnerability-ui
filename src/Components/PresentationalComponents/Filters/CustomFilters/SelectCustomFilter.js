import React, { useState } from 'react';
import propTypes from 'prop-types';
import {
    MenuToggle,
    Select,
    SelectList,
    SelectOption
} from '@patternfly/react-core';

const SelectCustomFilter = ({ filterData, setFilterData, selectProps, options, filterId, filterName }) => {
    const [isOpen, setOpen] = useState(false);

    const handleOnRadioChange = (filterId, optionName) => {
        const optionValue = options.find(item => item.label === optionName).value;
        setFilterData({ ...filterData, [filterId]: optionValue });
        setOpen(false);
    };

    const selectedValue = options.find(item => item.value === filterData[filterId])?.label;

    const toggle = toggleRef =>
        <MenuToggle
            ref={toggleRef}
            onClick={() => setOpen(!isOpen)}
            isExpanded={isOpen}
            style={{
                width: 'auto'
            }}>
            {
                filterName
                    ? `${filterName}: ${selectedValue}`
                    : `${selectedValue}`
            }
        </MenuToggle>;

    return (
        <div className="pf-v5-c-select pf-v5-u-mr-sm pf-v5-u-mb-sm" style={{ width: 'auto' }}>
            <Select
                aria-label="Select Input"
                isOpen={isOpen}
                key={filterId}
                onSelect={(event, optionName) => handleOnRadioChange(filterId, optionName)}
                onOpenChange={(isOpen) => setOpen(isOpen)}
                selected={selectedValue}
                toggle={toggle}
                shouldFocusToggleOnSelect
                {... selectProps}
            >
                <SelectList>
                    {options.map(item =>
                        <SelectOption
                            width="100%"
                            key={filterId + item.label}
                            value={item.label}
                        >
                            {item.label}
                        </SelectOption>
                    )}
                </SelectList>
            </Select>
        </div>
    );
};

SelectCustomFilter.propTypes = {
    filterName: propTypes.string,
    filterId: propTypes.string,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    selectProps: propTypes.object,
    options: propTypes.array
};

export default SelectCustomFilter;
